---
platform:
  os: linux
  arch: amd64

# Begin
clone:
  git-clone:
    commands: |
      set -ex
      git clone -b ${DRONE_TAG:-$DRONE_BRANCH} $DRONE_REMOTE_URL .
      if [ x$DRONE_PULL_REQUEST != x ]; then
          git fetch origin refs/pull/$DRONE_PULL_REQUEST/head
          EMAIL=ci git merge --no-edit FETCH_HEAD
      fi
      git rev-parse HEAD
    image: "casperlabs/buildenv:latest"

# NOTE: Anchors are per document
# Anchor for default buildenv
__buildenv: &buildenv
  image: "casperlabs/buildenv:latest"
  environment:
    CARGO_HOME: ".cargo"

# Anchor for cache plugin
# Caching based on https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
__cache: &cache
  image: drillster/drone-volume-cache
  volumes:
  - name: cache
    path: /cache
  settings:
    mount:
      - ./.cargo/bin/
      - ./.cargo/registry/index/
      - ./.cargo/registry/cache/
      - ./.cargo/git/db/
      - ./.cargo/.crates.toml

kind: pipeline
name: cargo

steps:
- name: restore-cache
  <<: *cache
  settings:
    restore: true

- name: build-deb-update-revision
  <<: *buildenv
  commands:
    - "./update-rev.sh" 

- name: cargo-fmt
  <<: *buildenv
  commands:
  - rustup component add rustfmt
  - cargo fmt --all -- --check
  depends_on:
  - build-deb-update-revision

- name: cargo-clippy
  <<: *buildenv
  environment:
    RUSTFLAGS: '-D warnings'
  commands:
  - make setup-rs
  - rustup component add clippy
  - cargo clippy --all-targets --all-features --workspace
  depends_on:
  - build-deb-update-revision

- name: cargo-audit
  <<: *buildenv
  commands:
  - cargo install cargo-audit
  - cargo generate-lockfile
  - cargo audit
  depends_on:
  - build-deb-update-revision

- name: updater-dry-run
  <<: *buildenv
  commands:
  - cargo run --package=casper-updater -- --root-dir=. --dry-run
  depends_on:
  - build-deb-update-revision

- name: cargo-test
  <<: *buildenv
  commands:
  - make setup
  - make test
  - make test-contracts
  depends_on:
  - build-deb-update-revision

- name: rebuild-cache
  <<: *cache
  settings:
    rebuild: true
  when:
    branch:
    - master
    event:
    - push

- name: build-deb
  <<: *buildenv
  commands:
    - "make deb"
  depends_on:
  - cargo-test

- name:
  <<: *buildend
  commands:
    - "ls -al /drone/src/target/debian"
    - "ls -alR /drone/src/target"
  depends_on:
    - build-deb

# we want to publish to the test repo, only when code is pushed to master or release-* branch. 
# bors should make sure, that it has passed on staging or trying branches
- name: publish-test-bintray
  <<: *buildenv
  commands:
  - "./upload.sh --repo-name casper-debian-tests --package-name casper-node"
  - "./upload.sh --repo-name casper-debian-tests --package-name casper-client"
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  when:
    branch:
    - master
    - "release-*"
    event:
    - push  
  depends_on:
  - build-deb

volumes:
  - name: cache
    host:
      path: /tmp/cache

trigger:
  branch:
  - master
  - trying
  - staging
  - "release-*"

---
# Anchor for default buildenv
__buildenv: &buildenv
  image: "casperlabs/buildenv:latest"
  environment:
    CARGO_HOME: ".cargo"
# act on release - when the tag is created
kind: pipeline
name: release-by-tag

steps:
- name: restore-cache-tag
  image: drillster/drone-volume-cache
  volumes:
  - name: cache
    path: /cache
  settings:
    mount:
      - ./.cargo/bin/
      - ./.cargo/registry/index/
      - ./.cargo/registry/cache/
      - ./.cargo/git/db/
      - ./.cargo/.crates.toml
    restore: true

- name: update-revision
  <<: *buildenv
  commands:
    - "./update-rev.sh"

- name: cargo-fmt
  <<: *buildenv
  commands:
  - rustup component add rustfmt
  - cargo fmt --all -- --check
  depends_on:
    - update-revision

- name: cargo-clippy
  <<: *buildenv
  environment:
    RUSTFLAGS: '-D warnings'
  commands:
  - make setup-rs
  - rustup component add clippy
  - cargo clippy --all-targets --all-features --workspace
  depends_on:
    - update-revision

- name: cargo-audit
  <<: *buildenv
  commands:
  - cargo install cargo-audit
  - cargo generate-lockfile
  - cargo audit
  depends_on:
  - cargo-clippy

- name: build-deb
  <<: *buildenv
  commands:
    - "make setup-rs"
    - "make deb"
  depends_on:
  - cargo-audit

- name: publish-crate-tag-TODO
  <<: *buildenv
  commands:
  - "echo TODO"
  depends_on:
  - cargo-audit

- name: publish-prod-bintray
  <<: *buildenv
  commands:
  - "./upload.sh --repo-name debian --package-name casper-node"
  environment:
    CL_VAULT_TOKEN:
      from_secret: vault_token
    CL_VAULT_HOST:
      from_secret: vault_host
  depends_on:
  - build-deb

- name: publish-github-pre-release
  image: plugins/github-release
  settings:
    api_key:
      from_secret: github_token
    checksum:
    - sha256
    - md5
    files:
    - "./target/debian/*.deb"
    prerelease:
    - true
  depends_on:
  - build-deb
  when:
    ref:
    - refs/tags/v*

volumes:
  - name: cache
    host:
      path: /tmp/cache
# push to test repo every time we are going to merge to master (via staging), trying or pushing to release (hot fix)
trigger:
  ref:
  - refs/tags/v*
---
kind: pipeline
name: failed-build-alert

clone:
  disable: true

steps:
- name: notify
  image: plugins/slack
  settings:
    webhook:
      from_secret: slack_webhook
    template:
    - |
      casper-node build status: *{{ uppercasefirst build.status }}*
      Author: {{ build.author }}
      Drone Build: <{{ build.link }}|#{{ build.number }}>
      Commit Link: <https://github.com/{{repo.owner}}/{{repo.name}}/commit/{{build.commit}}|{{ truncate build.commit 10 }}>
trigger:
  status:
  - failure
  branch:
  - master
  - trying
  - staging
  - "release-*"

depends_on:
- cargo
