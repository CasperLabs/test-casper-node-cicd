[genesis]
# Human readable name for convenience; the genesis_hash is the true identifier.  The name influences the genesis hash by
# contributing to the seeding of the pseudo-random number generator used in contract-runtime for computing genesis
# post-state hash.
name = 'casper-charlie-testnet-1'
# Timestamp for the genesis block, also used in seeding the pseudo-random number generator used in contract-runtime for
# computing genesis post-state hash.
timestamp = '2020-09-18T18:45:00Z'
# Protocol version at genesis.
protocol_version = '1.0.0'
# Path (absolute, or relative to this chainspec.toml) to the file containing wasm bytecode for installing the mint
# system contract.
mint_installer_path = '/etc/casper/wasm/mint_install.wasm'
# Path (absolute, or relative to this chainspec.toml) to the file containing wasm bytecode for installing the Proof of
# Stake system contract.
pos_installer_path = '/etc/casper/wasm/pos_install.wasm'
# Path (absolute, or relative to this chainspec.toml) to the file containing wasm bytecode for installing the Standard
# Payment system contract.
standard_payment_installer_path = '/etc/casper/wasm/standard_payment_install.wasm'
# Path (absolute, or relative to this chainspec.toml) to the file containing wasm bytecode for installing the Auction
# system contract.
auction_installer_path = '/etc/casper/wasm/auction_install.wasm'
# Path (absolute, or relative to this chainspec.toml) to the CSV file containing initial account balances and bonds.
accounts_path = '/etc/casper/accounts.csv'

[highway]
# Tick unit is milliseconds.
#
# Timestamp for the genesis era.  At least one node has to be started when the genesis era is active in order to make
# key blocks for the upcoming eras.  If the era is over by the time we start the nodes, they'll not be able to produce
# blocks in it, and there won't be a new era build either.  That means when a completely new network is started, the
# genesis era start time has to be adjusted to be active at the time.
genesis_era_start_timestamp = '2020-09-18T18:45:00Z'
# Era duration.
era_duration = '30minutes'
# Minimum number of blocks per era.  An era will take longer than `era_duration` if that is necessary to reach the
# minimum height.
minimum_era_height = 10
# Amount of time to go back before the start of the era for picking the booking block.
booking_duration = '0ms'
# Amount of time to wait after the booking before we pick the key block, collecting the magic bits along the way.
entropy_duration = '0ms'
# Keep voting on the switch block for a fixed amount of time; effective if the summit level is zero.
voting_period_duration = '2days'
# Integer between 1 and 99 representing the fault tolerance threshold as a percentage, used by the internal finalizer.
# It is the percentage of validators that would need to equivocate to make two honest nodes see two conflicting
# blocks as finalized: A higher value F makes it safer to rely on finalized blocks. It also makes it more difficult to
# finalize blocks, however, and requires at least 50% + F/2 validators to be working correctly.
finality_threshold_percent = 10
# Integer between 0 and 255. The power of two that is the number of milliseconds in the minimum round length, and
# therefore the minimum delay between a block and its child. E.g. 14 means 2^14 milliseconds, i.e. about 16 seconds.
minimum_round_exponent = 17

[deploys]
# The maximum number of Motes allowed to be spent during payment.  0 means unlimited.
max_payment_cost = '0'
# The duration after the deploy timestamp that it can be included in a block.
max_ttl = '1day'
# The maximum number of other deploys a deploy can depend on (require to have been executed before it can execute).
max_dependencies = 10
# Maximum block size in bytes.  0 means unlimited.
max_block_size = 10485760
# The maximum number of deploys permitted in a single block.
block_max_deploy_count = 10
# The upper limit of total gas of all deploys in a block.
block_gas_limit = 10000000000000

[wasm_costs]
# Default opcode cost.
regular = 1
# Div operations multiplier.
div = 16
# Mul operations multiplier.
mul = 4
# Memory (load/store) operations multiplier.
mem = 2
# Amount of free memory (in 64kB pages) each contract can use for stack.
initial_mem = 4096
# Grow memory cost, per page (64kB).
grow_mem = 8192
# Memory copy cost, per byte.
memcpy = 1
# Max stack height (native WebAssembly stack limiter).
max_stack_height = 65536
# Cost of wasm opcode is calculated as TABLE_ENTRY_COST * `opcodes_mul` / `opcodes_div`.
opcodes_mul = 3
opcodes_div = 8
